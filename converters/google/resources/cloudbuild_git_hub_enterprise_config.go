// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import "reflect"

const CloudBuildGitHubEnterpriseConfigAssetType string = "cloudbuild.googleapis.com/GitHubEnterpriseConfig"

func resourceConverterCloudBuildGitHubEnterpriseConfig() ResourceConverter {
	return ResourceConverter{
		AssetType: CloudBuildGitHubEnterpriseConfigAssetType,
		Convert:   GetCloudBuildGitHubEnterpriseConfigCaiObject,
	}
}

func GetCloudBuildGitHubEnterpriseConfigCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	name, err := assetName(d, config, "//cloudbuild.googleapis.com/projects/{{$projectId}}/githubEnterpriseConfigs/{{configId}}")
	if err != nil {
		return []Asset{}, err
	}
	if obj, err := GetCloudBuildGitHubEnterpriseConfigApiObject(d, config); err == nil {
		return []Asset{{
			Name: name,
			Type: CloudBuildGitHubEnterpriseConfigAssetType,
			Resource: &AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/cloudbuild/v1/rest",
				DiscoveryName:        "GitHubEnterpriseConfig",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []Asset{}, err
	}
}

func GetCloudBuildGitHubEnterpriseConfigApiObject(d TerraformResourceData, config *Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	nameProp, err := expandCloudBuildGitHubEnterpriseConfigName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !isEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	appIdProp, err := expandCloudBuildGitHubEnterpriseConfigAppId(d.Get("app_id"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("app_id"); !isEmptyValue(reflect.ValueOf(appIdProp)) && (ok || !reflect.DeepEqual(v, appIdProp)) {
		obj["appId"] = appIdProp
	}
	webhookKeyProp, err := expandCloudBuildGitHubEnterpriseConfigWebhookKey(d.Get("webhook_key"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("webhook_key"); !isEmptyValue(reflect.ValueOf(webhookKeyProp)) && (ok || !reflect.DeepEqual(v, webhookKeyProp)) {
		obj["webhookKey"] = webhookKeyProp
	}
	peeredNetworkProp, err := expandCloudBuildGitHubEnterpriseConfigPeeredNetwork(d.Get("peered_network"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("peered_network"); !isEmptyValue(reflect.ValueOf(peeredNetworkProp)) && (ok || !reflect.DeepEqual(v, peeredNetworkProp)) {
		obj["peeredNetwork"] = peeredNetworkProp
	}
	privateKeyNameProp, err := expandCloudBuildGitHubEnterpriseConfigPrivateKeyName(d.Get("private_key_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("private_key_name"); !isEmptyValue(reflect.ValueOf(privateKeyNameProp)) && (ok || !reflect.DeepEqual(v, privateKeyNameProp)) {
		obj["privateKeyName"] = privateKeyNameProp
	}
	displayNameProp, err := expandCloudBuildGitHubEnterpriseConfigDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !isEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	sslCaProp, err := expandCloudBuildGitHubEnterpriseConfigSslCa(d.Get("ssl_ca"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("ssl_ca"); !isEmptyValue(reflect.ValueOf(sslCaProp)) && (ok || !reflect.DeepEqual(v, sslCaProp)) {
		obj["sslCa"] = sslCaProp
	}
	projectIdProp, err := expandCloudBuildGitHubEnterpriseConfigProjectId(d.Get("project_id"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("project_id"); !isEmptyValue(reflect.ValueOf(projectIdProp)) && (ok || !reflect.DeepEqual(v, projectIdProp)) {
		obj["projectId"] = projectIdProp
	}

	return obj, nil
}

func expandCloudBuildGitHubEnterpriseConfigName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandCloudBuildGitHubEnterpriseConfigAppId(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandCloudBuildGitHubEnterpriseConfigWebhookKey(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandCloudBuildGitHubEnterpriseConfigPeeredNetwork(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandCloudBuildGitHubEnterpriseConfigPrivateKeyName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPrivateKeyVersionName, err := expandCloudBuildGitHubEnterpriseConfigPrivateKeyNamePrivateKeyVersionName(original["private_key_version_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateKeyVersionName); val.IsValid() && !isEmptyValue(val) {
		transformed["privateKeyVersionName"] = transformedPrivateKeyVersionName
	}

	transformedWebhookSecretVersionName, err := expandCloudBuildGitHubEnterpriseConfigPrivateKeyNameWebhookSecretVersionName(original["webhook_secret_version_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedWebhookSecretVersionName); val.IsValid() && !isEmptyValue(val) {
		transformed["webhookSecretVersionName"] = transformedWebhookSecretVersionName
	}

	transformedOauthSecretVersionName, err := expandCloudBuildGitHubEnterpriseConfigPrivateKeyNameOauthSecretVersionName(original["oauth_secret_version_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOauthSecretVersionName); val.IsValid() && !isEmptyValue(val) {
		transformed["oauthSecretVersionName"] = transformedOauthSecretVersionName
	}

	transformedOauthClientIdVersionName, err := expandCloudBuildGitHubEnterpriseConfigPrivateKeyNameOauthClientIdVersionName(original["oauth_client_id_version_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOauthClientIdVersionName); val.IsValid() && !isEmptyValue(val) {
		transformed["oauthClientIdVersionName"] = transformedOauthClientIdVersionName
	}

	return transformed, nil
}

func expandCloudBuildGitHubEnterpriseConfigPrivateKeyNamePrivateKeyVersionName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandCloudBuildGitHubEnterpriseConfigPrivateKeyNameWebhookSecretVersionName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandCloudBuildGitHubEnterpriseConfigPrivateKeyNameOauthSecretVersionName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandCloudBuildGitHubEnterpriseConfigPrivateKeyNameOauthClientIdVersionName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandCloudBuildGitHubEnterpriseConfigDisplayName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandCloudBuildGitHubEnterpriseConfigSslCa(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandCloudBuildGitHubEnterpriseConfigProjectId(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
