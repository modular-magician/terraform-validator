// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import "reflect"

const IapSettingsAssetType string = "iap.googleapis.com/Settings"

func resourceConverterIapSettings() ResourceConverter {
	return ResourceConverter{
		AssetType: IapSettingsAssetType,
		Convert:   GetIapSettingsCaiObject,
	}
}

func GetIapSettingsCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	name, err := assetName(d, config, "//iap.googleapis.com/projects/{{project}}/iap_web/compute/services/{{backend_service_id}}:iapSettings")
	if err != nil {
		return []Asset{}, err
	}
	if obj, err := GetIapSettingsApiObject(d, config); err == nil {
		return []Asset{{
			Name: name,
			Type: IapSettingsAssetType,
			Resource: &AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/iap/v1/rest",
				DiscoveryName:        "Settings",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []Asset{}, err
	}
}

func GetIapSettingsApiObject(d TerraformResourceData, config *Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	accessSettingsProp, err := expandIapSettingsAccessSettings(d.Get("access_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("access_settings"); !isEmptyValue(reflect.ValueOf(accessSettingsProp)) && (ok || !reflect.DeepEqual(v, accessSettingsProp)) {
		obj["accessSettings"] = accessSettingsProp
	}
	applicationSettingsProp, err := expandIapSettingsApplicationSettings(d.Get("application_settings"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("application_settings"); !isEmptyValue(reflect.ValueOf(applicationSettingsProp)) && (ok || !reflect.DeepEqual(v, applicationSettingsProp)) {
		obj["applicationSettings"] = applicationSettingsProp
	}

	return obj, nil
}

func expandIapSettingsAccessSettings(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedGcipSettings, err := expandIapSettingsAccessSettingsGcipSettings(original["gcip_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGcipSettings); val.IsValid() && !isEmptyValue(val) {
		transformed["gcipSettings"] = transformedGcipSettings
	}

	transformedCorsSettings, err := expandIapSettingsAccessSettingsCorsSettings(original["cors_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCorsSettings); val.IsValid() && !isEmptyValue(val) {
		transformed["corsSettings"] = transformedCorsSettings
	}

	transformedOauthSettings, err := expandIapSettingsAccessSettingsOauthSettings(original["oauth_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOauthSettings); val.IsValid() && !isEmptyValue(val) {
		transformed["oauthSettings"] = transformedOauthSettings
	}

	transformedReauthSettings, err := expandIapSettingsAccessSettingsReauthSettings(original["reauth_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedReauthSettings); val.IsValid() && !isEmptyValue(val) {
		transformed["reauthSettings"] = transformedReauthSettings
	}

	return transformed, nil
}

func expandIapSettingsAccessSettingsGcipSettings(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedTenantIds, err := expandIapSettingsAccessSettingsGcipSettingsTenantIds(original["tenant_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTenantIds); val.IsValid() && !isEmptyValue(val) {
		transformed["tenantIds"] = transformedTenantIds
	}

	transformedLoginPageUri, err := expandIapSettingsAccessSettingsGcipSettingsLoginPageUri(original["login_page_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLoginPageUri); val.IsValid() && !isEmptyValue(val) {
		transformed["loginPageUri"] = transformedLoginPageUri
	}

	return transformed, nil
}

func expandIapSettingsAccessSettingsGcipSettingsTenantIds(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsGcipSettingsLoginPageUri(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsCorsSettings(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllowHttpOptions, err := expandIapSettingsAccessSettingsCorsSettingsAllowHttpOptions(original["allow_http_options"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowHttpOptions); val.IsValid() && !isEmptyValue(val) {
		transformed["allowHttpOptions"] = transformedAllowHttpOptions
	}

	return transformed, nil
}

func expandIapSettingsAccessSettingsCorsSettingsAllowHttpOptions(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsOauthSettings(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedLoginHint, err := expandIapSettingsAccessSettingsOauthSettingsLoginHint(original["login_hint"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLoginHint); val.IsValid() && !isEmptyValue(val) {
		transformed["loginHint"] = transformedLoginHint
	}

	return transformed, nil
}

func expandIapSettingsAccessSettingsOauthSettingsLoginHint(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsReauthSettings(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMethod, err := expandIapSettingsAccessSettingsReauthSettingsMethod(original["method"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMethod); val.IsValid() && !isEmptyValue(val) {
		transformed["method"] = transformedMethod
	}

	transformedMaxAge, err := expandIapSettingsAccessSettingsReauthSettingsMaxAge(original["max_age"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxAge); val.IsValid() && !isEmptyValue(val) {
		transformed["maxAge"] = transformedMaxAge
	}

	transformedPolicyType, err := expandIapSettingsAccessSettingsReauthSettingsPolicyType(original["policy_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPolicyType); val.IsValid() && !isEmptyValue(val) {
		transformed["policyType"] = transformedPolicyType
	}

	return transformed, nil
}

func expandIapSettingsAccessSettingsReauthSettingsMethod(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsReauthSettingsMaxAge(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsAccessSettingsReauthSettingsPolicyType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsApplicationSettings(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCsmSettings, err := expandIapSettingsApplicationSettingsCsmSettings(original["csm_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCsmSettings); val.IsValid() && !isEmptyValue(val) {
		transformed["csmSettings"] = transformedCsmSettings
	}

	transformedAccessDeniedPageSettings, err := expandIapSettingsApplicationSettingsAccessDeniedPageSettings(original["access_denied_page_settings"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAccessDeniedPageSettings); val.IsValid() && !isEmptyValue(val) {
		transformed["accessDeniedPageSettings"] = transformedAccessDeniedPageSettings
	}

	transformedCookieDomain, err := expandIapSettingsApplicationSettingsCookieDomain(original["cookie_domain"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCookieDomain); val.IsValid() && !isEmptyValue(val) {
		transformed["cookieDomain"] = transformedCookieDomain
	}

	return transformed, nil
}

func expandIapSettingsApplicationSettingsCsmSettings(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRctokenAud, err := expandIapSettingsApplicationSettingsCsmSettingsRctokenAud(original["rctoken_aud"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRctokenAud); val.IsValid() && !isEmptyValue(val) {
		transformed["rctokenAud"] = transformedRctokenAud
	}

	return transformed, nil
}

func expandIapSettingsApplicationSettingsCsmSettingsRctokenAud(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsApplicationSettingsAccessDeniedPageSettings(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAccessDeniedPageUri, err := expandIapSettingsApplicationSettingsAccessDeniedPageSettingsAccessDeniedPageUri(original["access_denied_page_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAccessDeniedPageUri); val.IsValid() && !isEmptyValue(val) {
		transformed["accessDeniedPageUri"] = transformedAccessDeniedPageUri
	}

	transformedGenerateTroubleshootingUri, err := expandIapSettingsApplicationSettingsAccessDeniedPageSettingsGenerateTroubleshootingUri(original["generate_troubleshooting_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGenerateTroubleshootingUri); val.IsValid() && !isEmptyValue(val) {
		transformed["generateTroubleshootingUri"] = transformedGenerateTroubleshootingUri
	}

	return transformed, nil
}

func expandIapSettingsApplicationSettingsAccessDeniedPageSettingsAccessDeniedPageUri(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsApplicationSettingsAccessDeniedPageSettingsGenerateTroubleshootingUri(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandIapSettingsApplicationSettingsCookieDomain(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
