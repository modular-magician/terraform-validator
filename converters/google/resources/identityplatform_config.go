// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import "reflect"

const IdentityPlatformConfigAssetType string = "identitytoolkit.googleapis.com/Config"

func resourceConverterIdentityPlatformConfig() ResourceConverter {
	return ResourceConverter{
		AssetType: IdentityPlatformConfigAssetType,
		Convert:   GetIdentityPlatformConfigCaiObject,
	}
}

func GetIdentityPlatformConfigCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	name, err := assetName(d, config, "//identitytoolkit.googleapis.com/projects/{{project}}/config")
	if err != nil {
		return []Asset{}, err
	}
	if obj, err := GetIdentityPlatformConfigApiObject(d, config); err == nil {
		return []Asset{{
			Name: name,
			Type: IdentityPlatformConfigAssetType,
			Resource: &AssetResource{
				Version:              "v2",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/identitytoolkit/v2/rest",
				DiscoveryName:        "Config",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []Asset{}, err
	}
}

func GetIdentityPlatformConfigApiObject(d TerraformResourceData, config *Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	autodeleteAnonymousUsersProp, err := expandIdentityPlatformConfigAutodeleteAnonymousUsers(d.Get("autodelete_anonymous_users"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("autodelete_anonymous_users"); !isEmptyValue(reflect.ValueOf(autodeleteAnonymousUsersProp)) && (ok || !reflect.DeepEqual(v, autodeleteAnonymousUsersProp)) {
		obj["autodeleteAnonymousUsers"] = autodeleteAnonymousUsersProp
	}
	multiTenantProp, err := expandIdentityPlatformConfigMultiTenant(d.Get("multi_tenant"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("multi_tenant"); !isEmptyValue(reflect.ValueOf(multiTenantProp)) && (ok || !reflect.DeepEqual(v, multiTenantProp)) {
		obj["multiTenant"] = multiTenantProp
	}
	monitoringProp, err := expandIdentityPlatformConfigMonitoring(d.Get("monitoring"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("monitoring"); !isEmptyValue(reflect.ValueOf(monitoringProp)) && (ok || !reflect.DeepEqual(v, monitoringProp)) {
		obj["monitoring"] = monitoringProp
	}

	return obj, nil
}

func expandIdentityPlatformConfigAutodeleteAnonymousUsers(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandIdentityPlatformConfigMultiTenant(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAllowTenants, err := expandIdentityPlatformConfigMultiTenantAllowTenants(original["allow_tenants"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAllowTenants); val.IsValid() && !isEmptyValue(val) {
		transformed["allowTenants"] = transformedAllowTenants
	}

	transformedDefaultTenantLocation, err := expandIdentityPlatformConfigMultiTenantDefaultTenantLocation(original["default_tenant_location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultTenantLocation); val.IsValid() && !isEmptyValue(val) {
		transformed["defaultTenantLocation"] = transformedDefaultTenantLocation
	}

	return transformed, nil
}

func expandIdentityPlatformConfigMultiTenantAllowTenants(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandIdentityPlatformConfigMultiTenantDefaultTenantLocation(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandIdentityPlatformConfigMonitoring(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRequestLogging, err := expandIdentityPlatformConfigMonitoringRequestLogging(original["request_logging"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRequestLogging); val.IsValid() && !isEmptyValue(val) {
		transformed["requestLogging"] = transformedRequestLogging
	}

	return transformed, nil
}

func expandIdentityPlatformConfigMonitoringRequestLogging(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandIdentityPlatformConfigMonitoringRequestLoggingEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !isEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	return transformed, nil
}

func expandIdentityPlatformConfigMonitoringRequestLoggingEnabled(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
