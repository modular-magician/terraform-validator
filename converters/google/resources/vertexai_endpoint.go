// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import "reflect"

const VertexAIEndpointAssetType string = "{{region}}-aiplatform.googleapis.com/Endpoint"

func resourceConverterVertexAIEndpoint() ResourceConverter {
	return ResourceConverter{
		AssetType: VertexAIEndpointAssetType,
		Convert:   GetVertexAIEndpointCaiObject,
	}
}

func GetVertexAIEndpointCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	name, err := assetName(d, config, "//{{region}}-aiplatform.googleapis.com/projects/{{project}}/locations/{{region}}/endpoints/{{name}}")
	if err != nil {
		return []Asset{}, err
	}
	if obj, err := GetVertexAIEndpointApiObject(d, config); err == nil {
		return []Asset{{
			Name: name,
			Type: VertexAIEndpointAssetType,
			Resource: &AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{region}}-aiplatform/v1/rest",
				DiscoveryName:        "Endpoint",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []Asset{}, err
	}
}

func GetVertexAIEndpointApiObject(d TerraformResourceData, config *Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandVertexAIEndpointDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !isEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	descriptionProp, err := expandVertexAIEndpointDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !isEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	deployedModelsProp, err := expandVertexAIEndpointDeployedModels(d.Get("deployed_models"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("deployed_models"); !isEmptyValue(reflect.ValueOf(deployedModelsProp)) && (ok || !reflect.DeepEqual(v, deployedModelsProp)) {
		obj["deployedModels"] = deployedModelsProp
	}
	trafficSplitProp, err := expandVertexAIEndpointTrafficSplit(d.Get("traffic_split"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("traffic_split"); !isEmptyValue(reflect.ValueOf(trafficSplitProp)) && (ok || !reflect.DeepEqual(v, trafficSplitProp)) {
		obj["trafficSplit"] = trafficSplitProp
	}
	labelsProp, err := expandVertexAIEndpointLabels(d.Get("labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("labels"); !isEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	encryptionSpecProp, err := expandVertexAIEndpointEncryptionSpec(d.Get("encryption_spec"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("encryption_spec"); !isEmptyValue(reflect.ValueOf(encryptionSpecProp)) && (ok || !reflect.DeepEqual(v, encryptionSpecProp)) {
		obj["encryptionSpec"] = encryptionSpecProp
	}
	networkProp, err := expandVertexAIEndpointNetwork(d.Get("network"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("network"); !isEmptyValue(reflect.ValueOf(networkProp)) && (ok || !reflect.DeepEqual(v, networkProp)) {
		obj["network"] = networkProp
	}
	modelDeploymentMonitoringJobProp, err := expandVertexAIEndpointModelDeploymentMonitoringJob(d.Get("model_deployment_monitoring_job"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("model_deployment_monitoring_job"); !isEmptyValue(reflect.ValueOf(modelDeploymentMonitoringJobProp)) && (ok || !reflect.DeepEqual(v, modelDeploymentMonitoringJobProp)) {
		obj["modelDeploymentMonitoringJob"] = modelDeploymentMonitoringJobProp
	}

	return obj, nil
}

func expandVertexAIEndpointDisplayName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDescription(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModels(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedId, err := expandVertexAIEndpointDeployedModelsId(original["id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedId); val.IsValid() && !isEmptyValue(val) {
		transformed["id"] = transformedId
	}

	transformedModel, err := expandVertexAIEndpointDeployedModelsModel(original["model"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedModel); val.IsValid() && !isEmptyValue(val) {
		transformed["model"] = transformedModel
	}

	transformedCreateTime, err := expandVertexAIEndpointDeployedModelsCreateTime(original["create_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCreateTime); val.IsValid() && !isEmptyValue(val) {
		transformed["createTime"] = transformedCreateTime
	}

	transformedServiceAccount, err := expandVertexAIEndpointDeployedModelsServiceAccount(original["service_account"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAccount); val.IsValid() && !isEmptyValue(val) {
		transformed["serviceAccount"] = transformedServiceAccount
	}

	transformedEnableContainerLogging, err := expandVertexAIEndpointDeployedModelsEnableContainerLogging(original["enable_container_logging"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableContainerLogging); val.IsValid() && !isEmptyValue(val) {
		transformed["enableContainerLogging"] = transformedEnableContainerLogging
	}

	transformedEnableAccessLogging, err := expandVertexAIEndpointDeployedModelsEnableAccessLogging(original["enable_access_logging"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnableAccessLogging); val.IsValid() && !isEmptyValue(val) {
		transformed["enableAccessLogging"] = transformedEnableAccessLogging
	}

	transformedPrivateEndpoints, err := expandVertexAIEndpointDeployedModelsPrivateEndpoints(original["private_endpoints"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPrivateEndpoints); val.IsValid() && !isEmptyValue(val) {
		transformed["privateEndpoints"] = transformedPrivateEndpoints
	}

	transformedDedicatedResources, err := expandVertexAIEndpointDeployedModelsDedicatedResources(original["dedicated_resources"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDedicatedResources); val.IsValid() && !isEmptyValue(val) {
		transformed["dedicatedResources"] = transformedDedicatedResources
	}

	transformedAutomaticResources, err := expandVertexAIEndpointDeployedModelsAutomaticResources(original["automatic_resources"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutomaticResources); val.IsValid() && !isEmptyValue(val) {
		transformed["automaticResources"] = transformedAutomaticResources
	}

	return transformed, nil
}

func expandVertexAIEndpointDeployedModelsId(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsModel(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsCreateTime(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsServiceAccount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsEnableContainerLogging(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsEnableAccessLogging(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsPrivateEndpoints(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPredictHttpUri, err := expandVertexAIEndpointDeployedModelsPrivateEndpointsPredictHttpUri(original["predict_http_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPredictHttpUri); val.IsValid() && !isEmptyValue(val) {
		transformed["predictHttpUri"] = transformedPredictHttpUri
	}

	transformedExplainHttpUri, err := expandVertexAIEndpointDeployedModelsPrivateEndpointsExplainHttpUri(original["explain_http_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedExplainHttpUri); val.IsValid() && !isEmptyValue(val) {
		transformed["explainHttpUri"] = transformedExplainHttpUri
	}

	transformedHealthHttpUri, err := expandVertexAIEndpointDeployedModelsPrivateEndpointsHealthHttpUri(original["health_http_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedHealthHttpUri); val.IsValid() && !isEmptyValue(val) {
		transformed["healthHttpUri"] = transformedHealthHttpUri
	}

	return transformed, nil
}

func expandVertexAIEndpointDeployedModelsPrivateEndpointsPredictHttpUri(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsPrivateEndpointsExplainHttpUri(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsPrivateEndpointsHealthHttpUri(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsDedicatedResources(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMachineSpec, err := expandVertexAIEndpointDeployedModelsDedicatedResourcesMachineSpec(original["machine_spec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMachineSpec); val.IsValid() && !isEmptyValue(val) {
		transformed["machineSpec"] = transformedMachineSpec
	}

	transformedMinReplicaCount, err := expandVertexAIEndpointDeployedModelsDedicatedResourcesMinReplicaCount(original["min_replica_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinReplicaCount); val.IsValid() && !isEmptyValue(val) {
		transformed["minReplicaCount"] = transformedMinReplicaCount
	}

	transformedMaxReplicaCount, err := expandVertexAIEndpointDeployedModelsDedicatedResourcesMaxReplicaCount(original["max_replica_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxReplicaCount); val.IsValid() && !isEmptyValue(val) {
		transformed["maxReplicaCount"] = transformedMaxReplicaCount
	}

	return transformed, nil
}

func expandVertexAIEndpointDeployedModelsDedicatedResourcesMachineSpec(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMachineType, err := expandVertexAIEndpointDeployedModelsDedicatedResourcesMachineSpecMachineType(original["machine_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMachineType); val.IsValid() && !isEmptyValue(val) {
		transformed["machineType"] = transformedMachineType
	}

	transformedAcceleratorType, err := expandVertexAIEndpointDeployedModelsDedicatedResourcesMachineSpecAcceleratorType(original["accelerator_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAcceleratorType); val.IsValid() && !isEmptyValue(val) {
		transformed["acceleratorType"] = transformedAcceleratorType
	}

	transformedAcceleratorCount, err := expandVertexAIEndpointDeployedModelsDedicatedResourcesMachineSpecAcceleratorCount(original["accelerator_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAcceleratorCount); val.IsValid() && !isEmptyValue(val) {
		transformed["acceleratorCount"] = transformedAcceleratorCount
	}

	return transformed, nil
}

func expandVertexAIEndpointDeployedModelsDedicatedResourcesMachineSpecMachineType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsDedicatedResourcesMachineSpecAcceleratorType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsDedicatedResourcesMachineSpecAcceleratorCount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsDedicatedResourcesMinReplicaCount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsDedicatedResourcesMaxReplicaCount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsAutomaticResources(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMinReplicaCount, err := expandVertexAIEndpointDeployedModelsAutomaticResourcesMinReplicaCount(original["min_replica_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinReplicaCount); val.IsValid() && !isEmptyValue(val) {
		transformed["minReplicaCount"] = transformedMinReplicaCount
	}

	transformedMaxReplicaCount, err := expandVertexAIEndpointDeployedModelsAutomaticResourcesMaxReplicaCount(original["max_replica_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxReplicaCount); val.IsValid() && !isEmptyValue(val) {
		transformed["maxReplicaCount"] = transformedMaxReplicaCount
	}

	return transformed, nil
}

func expandVertexAIEndpointDeployedModelsAutomaticResourcesMinReplicaCount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointDeployedModelsAutomaticResourcesMaxReplicaCount(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointTrafficSplit(v interface{}, d TerraformResourceData, config *Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandVertexAIEndpointLabels(v interface{}, d TerraformResourceData, config *Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandVertexAIEndpointEncryptionSpec(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedKmsKeyName, err := expandVertexAIEndpointEncryptionSpecKmsKeyName(original["kms_key_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyName); val.IsValid() && !isEmptyValue(val) {
		transformed["kmsKeyName"] = transformedKmsKeyName
	}

	return transformed, nil
}

func expandVertexAIEndpointEncryptionSpecKmsKeyName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointNetwork(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIEndpointModelDeploymentMonitoringJob(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
