// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package test

import (
	"io/ioutil"
	"log"
	"os"
	"path"
	"testing"
)

func TestAccCloudRunService_cloudRunServicePubsubExample_generated_offline(t *testing.T) {
	testSlug := "CloudRunService_cloudRunServicePubsubExample_offline"
	offline := true
	testAccCloudRunService_cloudRunServicePubsubExample_shared(t, testSlug, offline)
}

func TestAccCloudRunService_cloudRunServicePubsubExample_generated_online(t *testing.T) {
	testSlug := "CloudRunService_cloudRunServicePubsubExample_online"
	offline := false
	testAccCloudRunService_cloudRunServicePubsubExample_shared(t, testSlug, offline)
}

func testAccCloudRunService_cloudRunServicePubsubExample_shared(t *testing.T, testSlug string, offline bool) {
	if testing.Short() {
		t.Skip("skipping integration test in short mode.")
		return
	}

	t.Parallel()
	context := map[string]interface{}{
		"project":       getTestProjectFromEnv(),
		"random_suffix": "meepmerp", // true randomization isn't needed for validator
	}

	terraformConfig := getTestPrefix() + testAccCloudRunService_cloudRunServicePubsubExample(context)
	dir, err := ioutil.TempDir(tmpDir, "terraform")
	if err != nil {
		log.Fatal(err)
	}
	defer os.RemoveAll(dir)

	dstFile := path.Join(dir, "main.tf")
	err = os.WriteFile(dstFile, []byte(terraformConfig), 0666)
	if err != nil {
		t.Fatalf("error while writing to file %s, error %v", dstFile, err)
	}

	terraformWorkflow(t, dir, testSlug)
	if offline && shouldOutputGeneratedFiles() {
		generateTFVconvertedAsset(t, dir, testSlug)
		return
	}

	// need to have comparison.. perhaps test vs checked in code
	// testConvertCommand(t, dir, c.name, offline, c.compareConvertOutput)

	testValidateCommandGeneric(t, dir, testSlug, offline)
}

func testAccCloudRunService_cloudRunServicePubsubExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_service" "default" {
    name     = "tf_test_cloud_run_service_name%{random_suffix}"
    location = "us-central1"

    template {
      spec {
            containers {
                image = "gcr.io/cloudrun/hello"
            }
      }
    }
    traffic {
      percent         = 100
      latest_revision = true
    }
}

resource "google_service_account" "sa" {
  account_id   = "cloud-run-pubsub-invoker"
  display_name = "Cloud Run Pub/Sub Invoker"
}

locals {
  cloud_run_url = google_cloud_run_service.default.status[0].url
  pubsub_sa= google_service_account.sa.email
}

resource "google_cloud_run_service_iam_binding" "binding" {
  location = google_cloud_run_service.default.location
  project = google_cloud_run_service.default.project
  service = google_cloud_run_service.default.name
  role = "roles/run.invoker"
  members = ["serviceAccount:${local.pubsub_sa}"]
}

resource "google_project_iam_binding" "project" {
  project = "%{project}"
  role    = "roles/iam.serviceAccountTokenCreator"
  members = ["serviceAccount:${local.pubsub_sa}"]
}

resource "google_pubsub_topic" "topic" {
  name = "tf_test_pubsub_topic%{random_suffix}"
}

resource "google_pubsub_subscription" "subscription" {
  name  = "tf_test_pubsub_subscription%{random_suffix}"
  topic = google_pubsub_topic.topic.name

  push_config {
    push_endpoint = "${local.cloud_run_url}"
    oidc_token {
      service_account_email = "${local.pubsub_sa}"
    }
    attributes = {
      x-goog-version = "v1"
    }
  }
}
`, context)
}

func TestAccCloudRunService_cloudRunServiceBasicExample_generated_offline(t *testing.T) {
	testSlug := "CloudRunService_cloudRunServiceBasicExample_offline"
	offline := true
	testAccCloudRunService_cloudRunServiceBasicExample_shared(t, testSlug, offline)
}

func TestAccCloudRunService_cloudRunServiceBasicExample_generated_online(t *testing.T) {
	testSlug := "CloudRunService_cloudRunServiceBasicExample_online"
	offline := false
	testAccCloudRunService_cloudRunServiceBasicExample_shared(t, testSlug, offline)
}

func testAccCloudRunService_cloudRunServiceBasicExample_shared(t *testing.T, testSlug string, offline bool) {
	if testing.Short() {
		t.Skip("skipping integration test in short mode.")
		return
	}

	t.Parallel()
	context := map[string]interface{}{
		"project":       getTestProjectFromEnv(),
		"random_suffix": "meepmerp", // true randomization isn't needed for validator
	}

	terraformConfig := getTestPrefix() + testAccCloudRunService_cloudRunServiceBasicExample(context)
	dir, err := ioutil.TempDir(tmpDir, "terraform")
	if err != nil {
		log.Fatal(err)
	}
	defer os.RemoveAll(dir)

	dstFile := path.Join(dir, "main.tf")
	err = os.WriteFile(dstFile, []byte(terraformConfig), 0666)
	if err != nil {
		t.Fatalf("error while writing to file %s, error %v", dstFile, err)
	}

	terraformWorkflow(t, dir, testSlug)
	if offline && shouldOutputGeneratedFiles() {
		generateTFVconvertedAsset(t, dir, testSlug)
		return
	}

	// need to have comparison.. perhaps test vs checked in code
	// testConvertCommand(t, dir, c.name, offline, c.compareConvertOutput)

	testValidateCommandGeneric(t, dir, testSlug, offline)
}

func testAccCloudRunService_cloudRunServiceBasicExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_service" "default" {
  name     = "tf-test-cloudrun-srv%{random_suffix}"
  location = "us-central1"

  template {
    spec {
      containers {
        image = "us-docker.pkg.dev/cloudrun/container/hello"
      }
    }
  }

  traffic {
    percent         = 100
    latest_revision = true
  }
}
`, context)
}

func TestAccCloudRunService_cloudRunServiceSqlExample_generated_offline(t *testing.T) {
	testSlug := "CloudRunService_cloudRunServiceSqlExample_offline"
	offline := true
	testAccCloudRunService_cloudRunServiceSqlExample_shared(t, testSlug, offline)
}

func TestAccCloudRunService_cloudRunServiceSqlExample_generated_online(t *testing.T) {
	testSlug := "CloudRunService_cloudRunServiceSqlExample_online"
	offline := false
	testAccCloudRunService_cloudRunServiceSqlExample_shared(t, testSlug, offline)
}

func testAccCloudRunService_cloudRunServiceSqlExample_shared(t *testing.T, testSlug string, offline bool) {
	if testing.Short() {
		t.Skip("skipping integration test in short mode.")
		return
	}

	t.Parallel()
	context := map[string]interface{}{
		"deletion_protection": false,
		"random_suffix":       "meepmerp", // true randomization isn't needed for validator
	}

	terraformConfig := getTestPrefix() + testAccCloudRunService_cloudRunServiceSqlExample(context)
	dir, err := ioutil.TempDir(tmpDir, "terraform")
	if err != nil {
		log.Fatal(err)
	}
	defer os.RemoveAll(dir)

	dstFile := path.Join(dir, "main.tf")
	err = os.WriteFile(dstFile, []byte(terraformConfig), 0666)
	if err != nil {
		t.Fatalf("error while writing to file %s, error %v", dstFile, err)
	}

	terraformWorkflow(t, dir, testSlug)
	if offline && shouldOutputGeneratedFiles() {
		generateTFVconvertedAsset(t, dir, testSlug)
		return
	}

	// need to have comparison.. perhaps test vs checked in code
	// testConvertCommand(t, dir, c.name, offline, c.compareConvertOutput)

	testValidateCommandGeneric(t, dir, testSlug, offline)
}

func testAccCloudRunService_cloudRunServiceSqlExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_service" "default" {
  name     = "tf-test-cloudrun-srv%{random_suffix}"
  location = "us-central1"

  template {
    spec {
      containers {
        image = "us-docker.pkg.dev/cloudrun/container/hello"
      }
    }

    metadata {
      annotations = {
        "autoscaling.knative.dev/maxScale"      = "1000"
        "run.googleapis.com/cloudsql-instances" = google_sql_database_instance.instance.connection_name
        "run.googleapis.com/client-name"        = "terraform"
      }
    }
  }
  autogenerate_revision_name = true
}

resource "google_sql_database_instance" "instance" {
  name             = "tf-test-cloudrun-sql%{random_suffix}"
  region           = "us-east1"
  database_version = "MYSQL_5_7"
  settings {
    tier = "db-f1-micro"
  }

  deletion_protection  = "%{deletion_protection}"
}
`, context)
}

func TestAccCloudRunService_cloudRunServiceMultipleEnvironmentVariablesExample_generated_offline(t *testing.T) {
	testSlug := "CloudRunService_cloudRunServiceMultipleEnvironmentVariablesExample_offline"
	offline := true
	testAccCloudRunService_cloudRunServiceMultipleEnvironmentVariablesExample_shared(t, testSlug, offline)
}

func TestAccCloudRunService_cloudRunServiceMultipleEnvironmentVariablesExample_generated_online(t *testing.T) {
	testSlug := "CloudRunService_cloudRunServiceMultipleEnvironmentVariablesExample_online"
	offline := false
	testAccCloudRunService_cloudRunServiceMultipleEnvironmentVariablesExample_shared(t, testSlug, offline)
}

func testAccCloudRunService_cloudRunServiceMultipleEnvironmentVariablesExample_shared(t *testing.T, testSlug string, offline bool) {
	if testing.Short() {
		t.Skip("skipping integration test in short mode.")
		return
	}

	t.Parallel()
	context := map[string]interface{}{
		"project":       getTestProjectFromEnv(),
		"random_suffix": "meepmerp", // true randomization isn't needed for validator
	}

	terraformConfig := getTestPrefix() + testAccCloudRunService_cloudRunServiceMultipleEnvironmentVariablesExample(context)
	dir, err := ioutil.TempDir(tmpDir, "terraform")
	if err != nil {
		log.Fatal(err)
	}
	defer os.RemoveAll(dir)

	dstFile := path.Join(dir, "main.tf")
	err = os.WriteFile(dstFile, []byte(terraformConfig), 0666)
	if err != nil {
		t.Fatalf("error while writing to file %s, error %v", dstFile, err)
	}

	terraformWorkflow(t, dir, testSlug)
	if offline && shouldOutputGeneratedFiles() {
		generateTFVconvertedAsset(t, dir, testSlug)
		return
	}

	// need to have comparison.. perhaps test vs checked in code
	// testConvertCommand(t, dir, c.name, offline, c.compareConvertOutput)

	testValidateCommandGeneric(t, dir, testSlug, offline)
}

func testAccCloudRunService_cloudRunServiceMultipleEnvironmentVariablesExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_cloud_run_service" "default" {
  name     = "tf-test-cloudrun-srv%{random_suffix}"
  location = "us-central1"

  template {
    spec {
      containers {
        image = "us-docker.pkg.dev/cloudrun/container/hello"
        env {
          name = "SOURCE"
          value = "remote"
        }
        env {
          name = "TARGET"
          value = "home"
        }
      }
    }
  }

  metadata {
    annotations = {
      generated-by = "magic-modules"
    }
  }

  traffic {
    percent         = 100
    latest_revision = true
  }
  autogenerate_revision_name = true

  lifecycle {
    ignore_changes = [
        metadata.0.annotations,
    ]
  }
}
`, context)
}
